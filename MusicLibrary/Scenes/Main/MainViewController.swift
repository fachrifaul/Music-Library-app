//
//  MainViewController.swift
//  MusicLibrary
//
//  Created by Fachri Work on 12/7/17.
//  Copyright (c) 2017 Decadev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: class {
    func displayAlbums(viewModel: Main.Albums.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic {
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var horizontalScrollerView: HorizontalScrollerView!
    
    fileprivate var currentAlbumIndex = 0
    fileprivate var currentAlbumData: [AlbumData]?
    fileprivate var allAlbums = [Album]()
    
    fileprivate let cellIdentifier = "Cell"
    fileprivate let indexRestorationKey = "currentAlbumIndex"
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupUI() {
        tableView.dataSource = self
        horizontalScrollerView.dataSource = self
        horizontalScrollerView.delegate = self
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        loadAlbums()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        horizontalScrollerView.scrollToView(at: currentAlbumIndex, animated: false)
    }
    
    // MARK: Load Data
    
    private func showDataForAlbum(at index: Int) {
        
        // defensive code: make sure the requested index is lower than the amount of albums
        if (index < allAlbums.count && index > -1) {
            // fetch the album
            let album = allAlbums[index]
            // save the albums data to present it later in the tableview
            currentAlbumData = album.tableRepresentation
        } else {
            currentAlbumData = nil
        }
        // we have the data we need, let's refresh our tableview
        tableView.reloadData()
    }
    
    func loadAlbums() {
        interactor?.loadAlbums()
    }
    
    func displayAlbums(viewModel: Main.Albums.ViewModel) {
        print("#albums \(viewModel.albums.count)")
        allAlbums = viewModel.albums
        
        horizontalScrollerView.reload()
        showDataForAlbum(at: currentAlbumIndex)
    }
}

extension MainViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let albumData = currentAlbumData else {
            return 0
        }
        return albumData.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath)
        if let albumData = currentAlbumData {
            let row = indexPath.row
            cell.textLabel?.text = albumData[row].title
            cell.detailTextLabel?.text = albumData[row].value
        }
        return cell
    }
}

extension MainViewController: HorizontalScrollerViewDelegate {
    func horizontalScrollerView(_ horizontalScrollerView: HorizontalScrollerView, didSelectViewAt index: Int) {
        //1
        let previousAlbumView = horizontalScrollerView.view(at: currentAlbumIndex) as! AlbumView
        previousAlbumView.highlightAlbum(false)
        //2
        currentAlbumIndex = index
        //3
        let albumView = horizontalScrollerView.view(at: currentAlbumIndex) as! AlbumView
        albumView.highlightAlbum(true)
        //4
        showDataForAlbum(at: index)
    }
}

extension MainViewController: HorizontalScrollerViewDataSource {
    func numberOfViews(in horizontalScrollerView: HorizontalScrollerView) -> Int {
        return allAlbums.count
    }
    
    func horizontalScrollerView(_ horizontalScrollerView: HorizontalScrollerView, viewAt index: Int) -> UIView {
        let album = allAlbums[index]
        let albumView = AlbumView(frame: CGRect(x: 0, y: 0, width: 100, height: 100), coverUrl: album.coverUrl)
        if currentAlbumIndex == index {
            albumView.highlightAlbum(true)
        } else {
            albumView.highlightAlbum(false)
        }
        return albumView
    }
}

//MARK: Memento pattern as part of State Restoration
extension MainViewController {
    
    override func encodeRestorableState(with coder: NSCoder) {
        
        super.encodeRestorableState(with: coder)
        guard isViewLoaded else {
            /*
             If the view has not been loaded, the app will crash
             upon accessing force-unwrapped outlets, e.g., `slider`.
             */
            return
        }
        
        coder.encode(currentAlbumIndex, forKey: indexRestorationKey)
        print("#encodeRestorableState \(currentAlbumIndex)")
    }
    
    override func decodeRestorableState(with coder: NSCoder) {
        super.decodeRestorableState(with: coder)
        currentAlbumIndex = coder.decodeInteger(forKey: indexRestorationKey)
        print("#decodeRestorableState \(currentAlbumIndex)")
        showDataForAlbum(at: currentAlbumIndex)
        horizontalScrollerView.reload()
    }
    
}
